# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Language {
  color: String
  name: String!
}

type Owner {
  extractedAt: DateTime!
  gravatarId: String!
  id: String!
  login: String!
  nodeId: String!
  platform: PlatformType!
  platformId: Float!
  recordUpdatedAt: DateTime!
  repositories(after: String, before: String, first: Int, last: Int): RepositoryConnection!
  siteAdmin: Boolean!
  type: OwnerType!
}

"""A repository owner could any of these types."""
enum OwnerType {
  """Owner is an organization."""
  Organization

  """Owner is a user."""
  User
}

"""Information about pagination in a connection."""
type PageInfo {
  """The cursor of the last edge in the connection."""
  endCursor: String

  """Indicates if there are more pages to fetch."""
  hasNextPage: Boolean!

  """Indicates if there are any pages prior to the current page."""
  hasPreviousPage: Boolean!

  """The cursor of the first edge in the connection."""
  startCursor: String
}

"""A repository owner could any of these types."""
enum PlatformType {
  """https://bitbucket.com"""
  BitBucket

  """https://github.com"""
  GitHub

  """https://gitlab.com"""
  GitLab
}

type Query {
  owner(id: String!): Owner
  ownerByLogin(login: String!): Owner
  ownerGithub(id: Float!): Owner
  repositories(after: String, before: String, first: Int, language: String, last: Int, order: ReposOrder, searchTerm: String): RepositoryConnection!
  repositoryById(id: String!): Repository
  repositoryGithub(id: Float!): Repository
  topic(name: String!): Topic
  topicById(id: String!): Topic
}

"""You can order repositories with one of these options."""
enum ReposOrder {
  """Order by creation date in ascending direction."""
  CREATED_ASC

  """Order by creation date in descending direction."""
  CREATED_DESC

  """Order by last push's date in ascending direction."""
  PUSHED_ASC

  """Order by last push's date in descending direction."""
  PUSHED_DESC

  """Order by most stars in descending direction."""
  STARS_DESC
}

type Repository {
  allowForking: Boolean!
  archived: Boolean!
  createdAt: DateTime!
  defaultBranch: String!
  description: String
  descriptionDirection: ScriptDirection!
  disabled: Boolean!
  extractedAt: DateTime!
  forksCount: Float!
  fullName: String!
  hasIssues: Boolean!
  hasPages: Boolean!
  hasProjects: Boolean!
  hasWiki: Boolean!
  homePage: String
  id: String!
  isFork: Boolean!
  isTemplate: Boolean!
  language: Language
  licenseId: String!
  limitedDescription: String
  mirrorUrl: String
  name: String!
  nodeId: String!
  openIssuesCount: Float!
  owner: Owner
  ownerId: String!
  platform: PlatformType!
  platformId: Float!
  platformUrl: String
  pushedAt: DateTime!
  recordUpdatedAt: DateTime!
  score: Float
  size: Float!
  stargazersCount: Float!
  topics: [Topic!]!
  updatedAt: DateTime!
  watchersCount: Float!
}

type RepositoryConnection {
  """A list of edges"""
  edges: [RepositoryEdge!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""A Repository edge."""
type RepositoryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of RepositoryEdge."""
  node: Repository!
}

"""A repository owner could any of these types."""
enum ScriptDirection {
  """left-to-right"""
  LTR

  """right-to-left"""
  RTL
}

type Topic {
  createdAt: DateTime!
  id: String!
  name: String!
  repositories(after: String, before: String, first: Int, last: Int): RepositoryConnection!
  repositoriesCount: Int!
}
