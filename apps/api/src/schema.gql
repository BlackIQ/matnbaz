# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Language {
  color: String
  description: String
  id: ID!
  name: String!
  repositories(after: String, before: String, first: Int, last: Int): RepositoryConnection!
  repositoriesCount: Int!
  slug: String!
}

type LanguageConnection {
  """A list of edges"""
  edges: [LanguageEdge!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""A Language edge."""
type LanguageEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of LanguageEdge."""
  node: Language!
}

"""You can order repositories with one of these options."""
enum LanguageOrder {
  """Order by repositories count in descending direction."""
  REPOSITORIES_DESC
}

type License {
  id: ID!
  key: String!
  name: String!
  repositories(after: String, before: String, first: Int, last: Int): RepositoryConnection!
  repositoriesCount: Int!
  spdxId: String!
}

type LicenseConnection {
  """A list of edges"""
  edges: [LicenseEdge!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""A License edge."""
type LicenseEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of LicenseEdge."""
  node: License!
}

"""You can order repositories with one of these options."""
enum LicenseOrder {
  """Order by repositories count in descending direction."""
  REPOSITORIES_DESC
}

type Owner {
  extractedAt: DateTime!
  gravatarId: String!
  id: String!
  login: String!
  platform: PlatformType!
  platformId: ID!
  recordUpdatedAt: DateTime!
  repositories(after: String, before: String, first: Int, last: Int): RepositoryConnection!
  repositoriesCount: Int!
  siteAdmin: Boolean!
  type: OwnerType!
}

"""A repository owner could any of these types."""
enum OwnerType {
  """Owner is an organization."""
  Organization

  """Owner is a user."""
  User
}

"""Information about pagination in a connection."""
type PageInfo {
  """The cursor of the last edge in the connection."""
  endCursor: String

  """Indicates if there are more pages to fetch."""
  hasNextPage: Boolean!

  """Indicates if there are any pages prior to the current page."""
  hasPreviousPage: Boolean!

  """The cursor of the first edge in the connection."""
  startCursor: String
}

"""A repository owner could any of these types."""
enum PlatformType {
  """https://bitbucket.com"""
  Bitbucket

  """https://github.com"""
  GitHub

  """https://gitlab.com"""
  GitLab
}

type Query {
  language(slug: String!): Language
  languages(after: String, before: String, first: Int, last: Int, order: LanguageOrder = REPOSITORIES_DESC): LanguageConnection!
  licenses(after: String, before: String, first: Int, last: Int, order: LicenseOrder = REPOSITORIES_DESC): LicenseConnection!
  owner(id: String!): Owner
  ownerByLogin(login: String!): Owner
  ownerByPlatform(id: ID!, platform: PlatformType!): Owner
  repositories(after: String, before: String, first: Int, languages: [String!], last: Int, order: RepoOrder = PUSHED_DESC, searchTerm: String, sourceType: RepoSourceType = ALL, type: [RepoType!]): RepositoryConnection!
  repositoryById(id: String!): Repository
  repositoryByPlatform(id: ID!, platform: PlatformType!): Repository
  topic(name: String!): Topic
  topicById(id: String!): Topic
  topics(after: String, before: String, first: Int, last: Int, order: TopicOrder = REPOSITORIES_DESC): TopicConnection!
}

"""You can order repositories with one of these options."""
enum RepoOrder {
  """Order by creation date in ascending direction."""
  CREATED_ASC

  """Order by creation date in descending direction."""
  CREATED_DESC

  """Order by last push's date in ascending direction."""
  PUSHED_ASC

  """Order by last push's date in descending direction."""
  PUSHED_DESC

  """Order by most stars in descending direction."""
  STARS_DESC
}

"""The repo type used in filters."""
enum RepoSourceType {
  """Doesn't apply any filter to the query."""
  ALL

  """Only returns the forked repositoroes."""
  FORK

  """Only returns the source repositoroes."""
  SOURCE
}

"""The repo type used in filters."""
enum RepoType {
  """Doesn't apply any filter to the query."""
  ALL

  """Only returns the archived repositoroes."""
  ARCHIVE

  """Only returns the template repositoroes."""
  TEMPLATE
}

type Repository {
  allowForking: Boolean!
  archived: Boolean!
  createdAt: DateTime!
  defaultBranch: String!
  description: String
  descriptionDirection: ScriptDirection!
  disabled: Boolean!
  extractedAt: DateTime!
  forksCount: Int!
  fullName: String!
  hasIssues: Boolean!
  hasPages: Boolean!
  hasProjects: Boolean!
  hasWiki: Boolean!
  homePage: String
  id: String!
  isFork: Boolean!
  isTemplate: Boolean!
  language: Language
  licenseId: String!
  limitedDescription: String
  mirrorUrl: String
  name: String!
  openIssuesCount: Int!
  owner: Owner
  ownerId: String!
  platform: PlatformType!
  platformId: ID!
  platformUrl: String
  pushedAt: DateTime!
  recordUpdatedAt: DateTime!
  size: Int!
  stargazersCount: Int!
  topics: [Topic!]!
  updatedAt: DateTime!
  watchersCount: Int!
}

type RepositoryConnection {
  """A list of edges"""
  edges: [RepositoryEdge!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""A Repository edge."""
type RepositoryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of RepositoryEdge."""
  node: Repository!
}

"""A repository owner could any of these types."""
enum ScriptDirection {
  """left-to-right"""
  LTR

  """right-to-left"""
  RTL
}

type Topic {
  createdAt: DateTime!
  id: String!
  name: String!
  repositories(after: String, before: String, first: Int, last: Int): RepositoryConnection!
  repositoriesCount: Int!
}

type TopicConnection {
  """A list of edges"""
  edges: [TopicEdge!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""A Topic edge."""
type TopicEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of TopicEdge."""
  node: Topic!
}

"""You can order repositories with one of these options."""
enum TopicOrder {
  """Order by repositories count in descending direction."""
  REPOSITORIES_DESC
}
