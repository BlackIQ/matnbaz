// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Repository {
  id                   String                @id @default(cuid())
  platform             PlatformType
  platformId           String
  size                 Int
  stargazersCount      Int
  watchersCount        Int
  forksCount           Int
  openIssuesCount      Int
  hasIssues            Boolean
  hasProjects          Boolean
  hasWiki              Boolean
  hasPages             Boolean
  archived             Boolean
  disabled             Boolean
  allowForking         Boolean
  isFork               Boolean
  isTemplate           Boolean
  createdAt            DateTime
  updatedAt            DateTime
  pushedAt             DateTime
  extractedAt          DateTime              @default(now())
  recordUpdatedAt      DateTime              @updatedAt
  name                 String
  description          String?
  readme               String?
  readmeHtml           String?
  defaultBranch        String
  homePage             String?
  mirrorUrl            String?
  Owner                Owner                 @relation(fields: [ownerId], references: [id])
  ownerId              String
  Language             Language?             @relation(fields: [languageId], references: [id])
  languageId           String?
  License              License?              @relation(fields: [licenseId], references: [id])
  licenseId            String?
  Topics               Topic[]
  blockedAt            DateTime?
  CollectionBlacklists CollectionBlacklist[]
  CollectionWhitelists CollectionWhitelist[]
  Collects             Collect[]

  @@unique([platform, platformId])
}

model License {
  id           String       @id @default(cuid())
  key          String       @unique
  name         String
  spdxId       String
  Repositories Repository[]
}

model Topic {
  id           String       @id @default(cuid())
  name         String       @unique
  Repositories Repository[]
  createdAt    DateTime     @default(now())
  // Used in these collections
  Collections  Collection[]
}

model Owner {
  id              String       @id @default(cuid())
  platform        PlatformType
  platformId      String
  login           String
  gravatarId      String
  type            OwnerType
  siteAdmin       Boolean
  Repositories    Repository[]
  extractedAt     DateTime     @default(now())
  recordUpdatedAt DateTime     @updatedAt
  blockedAt       DateTime?
  // Featured in these - owner-specific - collections
  Collections     Collection[]

  @@unique([platform, platformId])
  @@unique([platform, login])
}

model Submission {
  id         String       @id @default(cuid())
  username   String
  platform   PlatformType
  createdAt  DateTime     @default(now())
  repeatedAt DateTime     @updatedAt

  @@unique([platform, username])
}

model Report {
  id              String         @id @default(cuid())
  reason          String
  reportableId    String
  reportableType  ReportableType
  hasBeenResolved Boolean        @default(false)
  createdAt       DateTime       @default(now())

}

model Language {
  id           String       @id @default(cuid())
  name         String
  slug         String       @unique
  description  String?
  Repositories Repository[]
  Collections  Collection[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  type      UserType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DiscoveryTerm {
  id        String       @id @default(cuid())
  term      String
  platform  PlatformType
  createdAt DateTime     @default(now())

  @@unique([term, platform])
}

model Collection {
  id            String                @id @default(cuid())
  name          String
  slug          String                @unique
  description   String?
  terms         String[]
  Topics        Topic[]
  Owners        Owner[]
  color         String?
  image         String?
  Language      Language?             @relation(fields: [languageId], references: [id])
  languageId    String?
  minStargazers Int?
  minForks      Int?
  archived      Boolean?
  template      Boolean?
  minCreatedAt  DateTime?
  maxCreatedAt  DateTime?
  minPushedAt   DateTime?
  maxPushedAt   DateTime?
  Blacklist     CollectionBlacklist[]
  Whitelist     CollectionWhitelist[]
  Collects      Collect[]
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
}

model CollectionBlacklist {
  id           String     @id @default(cuid())
  Collection   Collection @relation(fields: [collectionId], references: [id])
  Repository   Repository @relation(fields: [repositoryId], references: [id])
  collectionId String
  repositoryId String
  createdAt    DateTime   @default(now())

  @@unique([collectionId, repositoryId])
}

model CollectionWhitelist {
  id           String     @id @default(cuid())
  Collection   Collection @relation(fields: [collectionId], references: [id])
  Repository   Repository @relation(fields: [repositoryId], references: [id])
  collectionId String
  repositoryId String
  createdAt    DateTime   @default(now())

  @@unique([collectionId, repositoryId])
}

model Collect {
  id           String     @id @default(cuid())
  Collection   Collection @relation(fields: [collectionId], references: [id])
  Repository   Repository @relation(fields: [repositoryId], references: [id])
  collectionId String
  repositoryId String
  createdAt    DateTime   @default(now())
}

enum OwnerType {
  User
  Organization
}

enum PlatformType {
  GitHub
  GitLab
  Bitbucket
}

enum ReportableType {
  Owner
  Repository
}

enum UserType {
  User
  Moderator
  Admin
}
